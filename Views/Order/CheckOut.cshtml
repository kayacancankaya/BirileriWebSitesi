@model BirileriWebSitesi.Models.ViewModels.CheckOutViewModel

@section Title {
<meta name="title" content="Kargo ve Fatura Bilgileri">
<title>Kargo ve Fatura Bilgileri</title>
}
@section Description {
<meta name="description" content="İthal ürünleri toptan ve perakende olarak satın alın. Katalog ürünleri, marka patent desteği ve e-ticaret çözümleri sunuyoruz.">
}
@section Keywords {
<meta name="keywords" content="Çin ithalat, toptan ürünler, perakende satış, marka patent, e-ticaret çözümleri, toptan spor malzemeleri ithalatı, marka desteği, toptan petshop ürünleri,
                                    toptan spor malzemesi">
}
@section CSS{
<style>
    #proceed-to-payment {
    display: inline-block;
    padding: 10px 20px;
    background-color: #FFB22F; /* Blue background */
    color: #000; /* White text */
    text-decoration: none; /* Remove underline */
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    font-family: sans-serif;
    text-align: center;
    transition: background-color 0.3s ease;
    }

    #proceed-to-payment:hover {
    background-color: #D99E00;
    color: #000; /* Darker on hover */
    }

    @@media (min-width: 780px) { 


    #billing-address-div {
    padding-top: 20px;
    padding-left: 10px;
    }
    }
    @@media (min-width: 780px) { 

    #billing-address-div {
    padding-top: 20px;
    padding-left: 10px;
    }
    }
            .shipment-card {
                border: 2px solid #ddd;
                border-radius: 12px;
                padding: 15px;
                text-align: center;
                cursor: pointer;
                transition: 0.3s;
            }

                .shipment-card.selected {
                    border-color: #007bff;
                    background-color: #f0f8ff;
                    box-shadow: 0 0 10px rgba(0,123,255,0.2);
                }

            .shipment-logo {
                max-width: 80px;
                max-height: 40px;
                object-fit: contain;
                margin-bottom: 8px;
            }

            .shipment-name {
                font-size: 14px;
                font-weight: 600;
            }
    
</style>
}


<!--CheckOut Page-->
<div class="checkout-page">
    <div class="auto-container">

        <!--Checkout Details-->
        <div class="checkout-form">

            <div class="row clearfix">
                <!--Ship to Address-->
                <div class="column col-lg-6 col-md-12 col-sm-12">

                    <div class="checkout-title">
                        <h2>Kargo Bilgileri</h2>
                    </div>
                    <div class="row clearfix">
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <input type="checkbox" id="is-billing-same" value="true"
                            @(Model.Order.ShipToAddress.IsBillingSame ? "checked=\"checked\"" : "")>        
                            <label for="is-billing-same">Fatura adresi kargo adresi ile aynı</label>
                        </div>

                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <input type="checkbox" id="is-corporate" value="true"
                            @(Model.Order.BillingAddress.IsCorporate ? "checked=\"checked\"" : "")>
                            <label for="is-corporate">Kurumsal Fatura</label>
                        </div>
                    </div>
                    <div class="row clearfix">

                        <!--Form Group-->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">İsim <sup>*</sup></div>
                            <input type="text" id="first-name" value="@Model.Order.ShipToAddress.FirstName" placeholder="İsminizi Giriniz...">
                        </div>

                        <!--Form Group-->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">Soy İsim <sup>*</sup></div>
                            <input type="text" id="last-name" value="@Model.Order.ShipToAddress.LastName" placeholder="Soy İsim Giriniz...">
                        </div>

                        <!--Form Group-->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">Email Adresi <sup>*</sup></div>
                            <input type="text" id="email" value="@Model.Order.ShipToAddress.EmailAddress" placeholder="Email Adresi Giriniz">
                        </div>

                        <!--Form Group-->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">Telefon</div>
                            <input type="text" id="phone" value="@Model.Order.ShipToAddress.Phone" placeholder="Telefon Numarası Giriniz">
                        </div>

                        <!--Form Group-->
                        <div class="form-group col-lg-12 col-md-12 col-sm-12">
                            <div class="field-label">Adres <sup>*</sup></div>
                            <input type="text" id="address-detailed" value="@Model.Order.ShipToAddress.AddressDetailed" placeholder="Açık Adres">
                        </div>


                        <!-- Hidden inputs to store selected values  -->
                        <input type="hidden" name="Order.ShipToAddress.City" id="shipping-city-input" value="@Model.Order.ShipToAddress.City" />
                        <input type="hidden" name="Order.ShipToAddress.State" id="shipping-state-input" value="@Model.Order.ShipToAddress.State" />
                        <input type="hidden" name="Order.ShipToAddress.Street" id="shipping-street-input" value="@Model.Order.ShipToAddress.Street" />

                        <!-- City -->
                        <div class="form-group col-lg-12 col-md-12 col-sm-12">
                            <div class="field-label">Şehir <sup>*</sup></div>
                            <select id="shipping-city" class="form-control">
                                <option value="0">-- Şehir seçin --</option>
                                @foreach (var city in Model.Cities)
                                {
                                    <option value="@city.Id">@city.Name</option>
                                }
                            </select>
                        </div>

                        <!-- District -->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">İlçe <sup>*</sup></div>
                            <select id="shipping-state" class="form-control">
                                <option value="0">-- İlçe seçin --</option>
                                @*   @foreach (var district in Model.Districts)
                                {
                                    <option value="@district">@district</option>
                                } *@
                            </select>
                        </div>

                        <!-- Neighborhood -->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">Mahalle <sup>*</sup></div>
                            <select id="shipping-street" class="form-control">
                                <option value="0">-- Mahalle seçin --</option>
                                @* @foreach (var neighborhood in Model.Streets)
                                {
                                    <option value="@neighborhood">@neighborhood</option>
                                } *@
                            </select>
                        </div>

                        <!--Form Group-->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">Posta Kodu</div>
                            <input type="text" id="zip" value="@Model.Order.ShipToAddress.ZipCode" placeholder="Posta Kodu">
                        </div>

                    </div>
                </div>

                <!--Billing Address-->
                <div class="column col-lg-6 col-md-12 col-sm-12 " id="billing-address-div">
                    <div class="checkout-title">
                        <h2>Fatura Bilgileri</h2>
                    </div>

                    <div class="row clearfix" id="is-corporate-main-div" >
                        <div id="is-corporate-div">
                            @Html.Partial("_PartialIsCorporate", Model.Order.BillingAddress)
                        </div>
                        <!--Form Group-->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">Email Adresi <sup>*</sup></div>
                            <input type="text" id="billing-email" value="@Model.Order.BillingAddress.EmailAddress" placeholder="Email Adresi Giriniz">
                        </div>

                        <!--Form Group-->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">Telefon</div>
                            <input type="text" id="billing-phone" value="@Model.Order.BillingAddress.Phone" placeholder="Telefon Numarası Giriniz">
                        </div>

                        <!--Form Group-->
                        <div class="form-group col-lg-12 col-md-12 col-sm-12">
                            <div class="field-label">Adres <sup>*</sup></div>
                            <input type="text" id="billing-address-detailed" value="@Model.Order.BillingAddress.AddressDetailed" placeholder="Açık Adres">
                        </div>


                        <!-- Hidden inputs to store selected values  -->
                        <input type="hidden" name="Order.BillingAddress.City" id="billing-city-input" value="@Model.Order.BillingAddress.City" />
                        <input type="hidden" name="Order.BillingAddress.State" id="billing-state-input" value="@Model.Order.BillingAddress.State" />
                        <input type="hidden" name="Order.BillingAddress.Street" id="billing-street-input" value="@Model.Order.BillingAddress.Street" />

                        <!-- City -->
                        <div class="form-group col-lg-12 col-md-12 col-sm-12">
                            <div class="field-label">Şehir <sup>*</sup></div>
                            <select id="billing-city" class="form-control">
                                <option value="0">-- Şehir seçin --</option>
                                @foreach (var city in Model.Cities)
                                {
                                    <option value="@city.Id">@city.Name</option>
                                }
                            </select>
                        </div>

                        <!-- District -->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">İlçe <sup>*</sup></div>
                            <select id="billing-state" class="form-control">
                                <option value="0">-- İlçe seçin --</option>
                                @*   @foreach (var district in Model.Districts)
                                {
                                    <option value="@district">@district</option>
                                } *@
                            </select>
                        </div>

                        <!-- Neighborhood -->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">Mahalle <sup>*</sup></div>
                            <select id="billing-street" class="form-control">
                                <option value="0">-- Mahalle seçin --</option>
                                @* @foreach (var neighborhood in Model.Streets)
                                {
                                    <option value="@neighborhood">@neighborhood</option>
                                } *@
                            </select>
                        </div>

                        <!--Form Group-->
                        <div class="form-group col-lg-6 col-md-6 col-sm-12">
                            <div class="field-label">Posta Kodu </div>
                            <input type="text" id="billing-zip" value="@Model.Order.BillingAddress.ZipCode" placeholder="Posta Kodu">
                        </div>
                    </div>
                </div>
                <!--Notes-->
                <div class="form-group col-lg-12 col-md-12 col-sm-12">
                    <div class="field-label">Not</div>
                    <textarea id="other-notes" placeholder="Gönderiye ait var ise özel notlarınızı yazınız..."></textarea>
                </div>

                <!--Update user info-->
                <div class="form-group col-lg-12 col-md-12 col-sm-12">
                    <div class="field-label">Varsayılan Adres Yap</div>
                    <input type="checkbox" id="update-user-info" value="true"
                    @(Model.Order.UpdateUserInfo ? "checked=\"checked\"" : "")>
                </div>
            </div>
            <div class="row clearfix mt-3 mb-0">
                <div class="checkout-title">
                    <h2>Kargo Firması</h2>
                </div>
                <div class="row g-3" id="shipment-companies">
                    @if(Model.ShipmentCompanies != null)
                    {
                        if(Model.ShipmentCompanies.Any())
                        {
                            
                            @foreach(var company in Model.ShipmentCompanies)
                            {
                                if (company.Code == "YURTICI" || company.Code == "PTT" || company.Code == "HEPSIJET" || company.Code == "ARAS" || company.Code == "SURAT")
                                {
                                    <div class="col-6 col-md-4">
                                        <div class="shipment-card" data-code="@company.Code">
                                            <img src="@company.Logo" alt="@company.Name" class="shipment-logo" />
                                            <div class="shipment-name">@company.Name</div>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }
                    <input type="hidden" id="selectedShipmentCode" value="" />
                    <input type="hidden" id="cargo-amount" value="" />
                    <input type="hidden" id="desi" value="@Model.Desi.ToString()" />

                </div>
            </div>
        </div>

        <!--End Checkout Details-->
        <!--Order Box-->
        <div class="order-box">
            <h2>Siparişiniz</h2>
            <div class="title-box clearfix">
                <div class="col">ÜRÜN</div>
                <div class="col">TOPLAM</div>
            </div>
            <ul>

                @foreach (var item in Model.Order.OrderItems)
                {
                    decimal subTotal = item.UnitPrice * item.Units;
                    <li class="clearfix order-item">
                        <input type="hidden" class="product-code" value="@item.ProductCode" />
                        <input type="hidden" class="product-name" value="@item.ProductName" />
                        <input type="hidden" class="unit-price" value="@item.UnitPrice" />
                        Ürün Adı:<strong><span class="product-name">@item.ProductName </span> / Miktar: <span class="quantity">@item.Units</span>
                        </strong>
                    </li>
                    <li class="clearfix">ALT TOPLAM <span>@subTotal</span></li>
                }
                <li class="clearfix">KARGO ÜCRETİ<span class="free">ÜCRETSİZ</span></li>
                <li class="clearfix">TOPLAM<span>@Model.Order.TotalAmount ₺</span></li>
            </ul>
        </div>
        <!--End Order Box-->

        <div class="lower-box text-right">
            <span class="alert-text">  </span>
            <a id="proceed-to-payment" class="theme-btn order-btn" style="border-radius:30px;">ÖDEME İŞLEMLERİ</a>
        </div>
    </div>
</div>
<!--End CheckOut Page-->
@section AdditionalScripts {
    <script>
        $(document).ready(function (){
            //make active related nav button
            $(".dropdown").removeClass("current");
            $(".cart").addClass("current");
            //decide if is billingAddress same and iscoorporate from the ondblclick info 
            var isBillingSame = $("#is-billing-same").is(":checked"); 
            if (isBillingSame) {
                
                $("#billing-address-div").css("display", "none");
            };
            //toggle related 
            $(document).on("change", "#is-billing-same", function () {
                var isBillingSame = $(this).is(":checked");
                
                if (isBillingSame) {
                    $("#billing-address-div").css("display", "none");
                }   
                else{
                    $("#billing-address-div").css("display", "block");
                }

            });
            $(document).on("change", "#is-corporate", function () {
             
                var firstName = $("#billing-first-name").val();
                var lastName = $("#billing-last-name").val();
                var corporateName = $("#corporate").val();
                var vATNumber = $("#vat").val();
                var vATState = $("#vat-state").val();
                var isCorporate = $(this).is(":checked");
                
                if (isCorporate) {
                    $("#is-billing-same").prop("checked", false);
                    $("#is-billing-same").prop("disabled", true);
                    $("#billing-address-div").css("display", "block");

                    $("#billing-address-div").css("display", "block");
                    $.ajax({
                        type: "GET",
                        url: "/Order/_PartialIsCorporate",
                        async: true,
                        data: {
                            firstName : firstName,
                            lastName : lastName,
                            corporateName : corporateName,
                            vATNumber : vATNumber,
                            vATState : vATState,
                            isCorporate : isCorporate,
                        },
                        success: function (result) {
                            $("#is-corporate-div").html(result);
                        }
                    });
                }
                else {
                    $("#is-billing-same").prop("disabled", false);
                    var isBillingSame = $(this).is(":checked");
                    if(isBillingSame)
                    {
                        $("#billing-address-div").css("display", "none");
                    }
                    else
                    {
                           $.ajax({
                           type: "GET",
                           url: "/Order/_PartialIsCorporate",
                           async: true,
                           data: {
                                firstName : firstName,
                                lastName : lastName,
                                corporateName : corporateName,
                                vATNumber : vATNumber,
                                vATState : vATState,
                                isCorporate : isCorporate,
                           },
                           success: function (result) {
                               $("#is-corporate-div").html(result);
                           }
                        });
                    }
                }
            });

            $(document).on("click", "#proceed-to-payment", function (e) {

                e.preventDefault();
                var button = $(this);
                let requiredFields = ["first-name", "last-name", "email", "city", "state", "address-detailed", "street"];
                var isBillingSame = $("#is-billing-same").is(":checked");
                var isCorporate = $("#is-corporate").is(":checked");
                if (!isBillingSame)
                {
                    if (isCorporate) {
                        requiredFields.push("corporate-name", "vat", "vat-state");
                    } else {
                        requiredFields.push("billing-first-name", "billing-last-name");
                    }
                    requiredFields.push("billing-email", "billing-city", "billing-state", "billing-address-detailed", "billing-street")

                }
                
                let isValid = true;

                // if fields are filled
                requiredFields.forEach(function (id) {
                    let input = document.getElementById(id);
                    if (input && input.value.trim() === "") {
                        isValid = false;
                        input.style.border = "1px solid red"; // Highlight empty fields
                    } else {
                        input.style.border = ""; // Reset style
                    }
                });
                if (!isValid) {
                    e.preventDefault();
                    showAlert(button,"Lütfen zorunlu alanları doldurun.","danger");
                    return;
                }
               
                // Disable button and show loading
                $("#proceed-to-payment").text("İşlem Yapılıyor...").prop("disabled", true);


                // Gather checkout data
                var shipToAddress = {
                    FirstName: $("#first-name").val(),
                    LastName: $("#last-name").val(),
                    CorporateName: "",
                    EmailAddress: $("#email").val(),
                    Phone: $("#phone").val(),
                    AddressDetailed: $("#address-detailed").val(),
                    City: $("#city").val(),
                    State: $("#state").val(),
                    Street: $("#street").val(),
                    ZipCode: $("#zip").val(),
                    IsBilling: false,
                    IsBillingSame: $("#is-billing-same").is(":checked"),
                     IsCorporate:false,
                    Country: "Türkiye",
                    VATnumber :"",
                    VATState :"",
                };

                var billingAddress = {};
                if (shipToAddress.IsBillingSame) {
                    billingAddress = { 
                        FirstName: $("#first-name").val(),
                        LastName: $("#last-name").val(),
                        CorporateName:"",
                        EmailAddress: $("#email").val(),
                        Phone: $("#phone").val(),
                        AddressDetailed: $("#address-detailed").val(),
                        City: $("#city").val(),
                        State: $("#state").val(),
                        Street: $("#street").val(),
                        ZipCode: $("#zip").val(),
                        IsBilling: true,
                        IsBillingSame: $("#is-billing-same").is(":checked"),
                        IsCorporate:false,
                        Country: "Türkiye",
                        VATnumber:"11111111111",
                        VATState:"",
                    };
                }
                else
                {
                    billingAddress = {
                        FirstName : $("#billing-first-name").val(),
                        LastName : $("#billing-last-name").val(),
                        CorporateName : $("#corporate-name").val(),
                        EmailAddress: $("#billing-email").val(),
                        Phone: $("#billing-phone").val(),
                        AddressDetailed: $("#billing-address-detailed").val(),
                        City: $("#billing-city").val(),
                        State: $("#billing-state").val(),
                        Street: $("#billing-street").val(),
                        ZipCode: $("#billing-zip").val(),
                        IsBilling: true,
                        IsBillingSame: $("#is-billing-same").is(":checked"),
                        IsCorporate: $("#is-corporate").is(":checked"),
                        Country: "Türkiye",
                        VATnumber : $("#vat").val(),
                        VATState : $("#vat-state").val(),
                    };
                };
                var orderItems = [];
                $(".order-item").each(function () {
                    var item = {
                        ProductCode: $(this).find(".product-code").val(),
                        ProductName: $(this).find(".product-name").val(),

                        UnitPrice: parseFloat($(this).find(".unit-price").val()),
                        Units: parseInt($(this).find(".quantity").text().trim())
                    };

                    orderItems.push(item);
                });
                var notes = $("#other-notes").val();
                var updateUserInfo = $("#update-user-info").is(":checked");
                var data = {
                    ShipToAddress: shipToAddress,
                    BillingAddress: billingAddress,
                    OrderItems: orderItems,
                    Notes: notes,
                    UpdateUserInfo: updateUserInfo
                };

                // Send AJAX request
                $.ajax({
                    url: "/Order/ProceedToPayment",
                    type: "POST",
                    contentType: "application/json",
                    dataType: "JSON",
                    async: true,
                    data: JSON.stringify(data),
                    
                    headers: { "RequestVerificationToken": getAntiForgeryToken() },
                    success: function (response) {
                        if (response.success){
                           window.location.href = response.redirectUrl;
                        }
                        else{
                            showAlert(button, response.message, "error");
                            $("#proceed-to-payment").text("Ödeme Adımına Geç").prop("disabled", false);
                        }
                    },   
                    error: function (xhr) {
                        let message = "Bir hata oluştu.";
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            message = xhr.responseJSON.message;
                        }
                        showAlert(button, message, "error");
                        $("#proceed-to-payment").text("Ödeme Adımına Geç").prop("disabled", false);
                    }
                });

            });
            // When Shipping City changes
            document.getElementById("shipping-city").addEventListener("change", function () {
                let value = this.value;
                document.getElementById("shipping-city-input").value = value;

                // Call server to get districts dynamically
                if (value) {

                    fetch(`/Order/GetDistricts?cityId=${value}`)
                        .then(res => res.json())
                        .then(data => {
                            let stateSelect = document.getElementById("shipping-state");
                            stateSelect.innerHTML = '<option value="0">-- İlçe seçin --</option>';

                            data.forEach(d => {
                                let opt = document.createElement("option");
                                opt.value = d.id;
                                opt.text = d.name;
                                stateSelect.appendChild(opt);
                            });

                            // Reset hidden state + street
                            document.getElementById("shipping-state-input").value = "";
                            document.getElementById("shipping-street-input").value = "";
                            document.getElementById("shipping-street").innerHTML = '<option value="">-- Mahalle seçin --</option>';
                        });
                }
            });

            // When Shipping District changes
            document.getElementById("shipping-state").addEventListener("change", function () {
                let value = this.value;
                document.getElementById("shipping-state-input").value = value;

                // Call server to get streets dynamically
                if (value) {
                        fetch(`/Order/GetStreets?districtId=${value}`)
                        .then(res => res.json())
                        .then(data => {
                            let streetSelect = document.getElementById("shipping-street");
                            streetSelect.innerHTML = '<option value="">-- Mahalle seçin --</option>';

                            data.forEach(n => {
                                let opt = document.createElement("option");
                                opt.value = n.id;
                                opt.text = n.name;
                                streetSelect.appendChild(opt);
                            });

                            document.getElementById("shipping-street-input").value = "";
                        });
                }
            });

            // When Shipping Neighborhood changes
            document.getElementById("shipping-street").addEventListener("change", function () {
                document.getElementById("shipping-street-input").value = this.value;
            });
            // When Billing City changes
            document.getElementById("billing-city").addEventListener("change", function () {
                let value = this.value;
                document.getElementById("billing-city-input").value = value;

                // Call server to get districts dynamically
                if (value) {
                        fetch(`/Order/GetDistricts?cityId=${value}`)
                        .then(res => res.json())
                        .then(data => {
                            let stateSelect = document.getElementById("billing-state");
                            stateSelect.innerHTML = '<option value="">-- İlçe seçin --</option>';

                            data.forEach(d => {
                                let opt = document.createElement("option");
                                opt.value = d.id;
                                opt.text = d.name;
                                stateSelect.appendChild(opt);
                            });

                            // Reset hidden state + street
                            document.getElementById("billing-state-input").value = "";
                            document.getElementById("billing-street-input").value = "";
                            document.getElementById("billing-street").innerHTML = '<option value="">-- Mahalle seçin --</option>';
                        });
                }
            });

            // When Billing District changes
            document.getElementById("billing-state").addEventListener("change", function () {
                let value = this.value;
                document.getElementById("billing-state-input").value = value;

                // Call server to get streets dynamically
                if (value) {
                        fetch(`/Order/GetStreets?district=${value}`)
                        .then(res => res.json())
                        .then(data => {
                            let streetSelect = document.getElementById("billing-street");
                            streetSelect.innerHTML = '<option value="">-- Mahalle seçin --</option>';

                            data.forEach(n => {
                                let opt = document.createElement("option");
                                opt.value = n.id;
                                opt.text = n.name;
                                streetSelect.appendChild(opt);
                            });

                            document.getElementById("billing-street-input").value = "";
                        });
                }
            });

            // When Billing Neighborhood changes
            document.getElementById("billing-street").addEventListener("change", function () {
                document.getElementById("billing-street-input").value = this.value;
            });

            //cargo company 
                const $cards = $(".shipment-card");
                const $hiddenInput = $("#selectedShipmentCode");
                    $cards.on("click", function () {
                        const $clicked = $(this);
                        const isSelected = $clicked.hasClass("selected");

                        // clear all selections
                        $cards.removeClass("selected");

                        if (!isSelected) {
                            // select clicked one
                            $clicked.addClass("selected");
                            $hiddenInput.val($clicked.data("code"));
                        } else {
                            // unselect if same clicked again
                            $hiddenInput.val("");
                        }

                        // trigger custom event using jQuery
                        $(document).trigger("shipmentSelectionChanged", [$hiddenInput.val()]);
                    });
                    // listen for the custom event

        $(document).on("shipmentSelectionChanged", function (e, selectedCode) {
                fetch(`/Order/CalculateShipment?code=${encodeURIComponent(selectedCode)&&desi=${encodeURIComponent(desi)}`)
                .then(res => {
                    if (!res.ok) throw new Error("Network response was not ok");
                    return res.json();
                })
                .then(data => {
                    // data.amount beklenen float
                    $("#cargo-amount").val(data.amount);
                })
                .catch(err => console.error(err));
        });
                    
    });
    </script>
}
